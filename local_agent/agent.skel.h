/* SPDX-License-Identifier: (LGPL-2.1 OR BSD-2-Clause) */

/* THIS FILE IS AUTOGENERATED BY BPFTOOL! */
#ifndef __AGENT_BPF_SKEL_H__
#define __AGENT_BPF_SKEL_H__

#include <errno.h>
#include <stdlib.h>
#include <bpf/libbpf.h>

#define BPF_SKEL_SUPPORTS_MAP_AUTO_ATTACH 1

struct agent_bpf {
	struct bpf_object_skeleton *skeleton;
	struct bpf_object *obj;
	struct {
		struct bpf_map *rodata;
	} maps;
	struct {
		struct bpf_program *handle_execve;
	} progs;
	struct {
		struct bpf_link *handle_execve;
	} links;

#ifdef __cplusplus
	static inline struct agent_bpf *open(const struct bpf_object_open_opts *opts = nullptr);
	static inline struct agent_bpf *open_and_load();
	static inline int load(struct agent_bpf *skel);
	static inline int attach(struct agent_bpf *skel);
	static inline void detach(struct agent_bpf *skel);
	static inline void destroy(struct agent_bpf *skel);
	static inline const void *elf_bytes(size_t *sz);
#endif /* __cplusplus */
};

static void
agent_bpf__destroy(struct agent_bpf *obj)
{
	if (!obj)
		return;
	if (obj->skeleton)
		bpf_object__destroy_skeleton(obj->skeleton);
	free(obj);
}

static inline int
agent_bpf__create_skeleton(struct agent_bpf *obj);

static inline struct agent_bpf *
agent_bpf__open_opts(const struct bpf_object_open_opts *opts)
{
	struct agent_bpf *obj;
	int err;

	obj = (struct agent_bpf *)calloc(1, sizeof(*obj));
	if (!obj) {
		errno = ENOMEM;
		return NULL;
	}

	err = agent_bpf__create_skeleton(obj);
	if (err)
		goto err_out;

	err = bpf_object__open_skeleton(obj->skeleton, opts);
	if (err)
		goto err_out;

	return obj;
err_out:
	agent_bpf__destroy(obj);
	errno = -err;
	return NULL;
}

static inline struct agent_bpf *
agent_bpf__open(void)
{
	return agent_bpf__open_opts(NULL);
}

static inline int
agent_bpf__load(struct agent_bpf *obj)
{
	return bpf_object__load_skeleton(obj->skeleton);
}

static inline struct agent_bpf *
agent_bpf__open_and_load(void)
{
	struct agent_bpf *obj;
	int err;

	obj = agent_bpf__open();
	if (!obj)
		return NULL;
	err = agent_bpf__load(obj);
	if (err) {
		agent_bpf__destroy(obj);
		errno = -err;
		return NULL;
	}
	return obj;
}

static inline int
agent_bpf__attach(struct agent_bpf *obj)
{
	return bpf_object__attach_skeleton(obj->skeleton);
}

static inline void
agent_bpf__detach(struct agent_bpf *obj)
{
	bpf_object__detach_skeleton(obj->skeleton);
}

static inline const void *agent_bpf__elf_bytes(size_t *sz);

static inline int
agent_bpf__create_skeleton(struct agent_bpf *obj)
{
	struct bpf_object_skeleton *s;
	struct bpf_map_skeleton *map __attribute__((unused));
	int err;

	s = (struct bpf_object_skeleton *)calloc(1, sizeof(*s));
	if (!s)	{
		err = -ENOMEM;
		goto err;
	}

	s->sz = sizeof(*s);
	s->name = "agent_bpf";
	s->obj = &obj->obj;

	/* maps */
	s->map_cnt = 1;
	s->map_skel_sz = 24;
	s->maps = (struct bpf_map_skeleton *)calloc(s->map_cnt,
			sizeof(*s->maps) > 24 ? sizeof(*s->maps) : 24);
	if (!s->maps) {
		err = -ENOMEM;
		goto err;
	}

	map = (struct bpf_map_skeleton *)((char *)s->maps + 0 * s->map_skel_sz);
	map->name = "agent_bp.rodata";
	map->map = &obj->maps.rodata;

	/* programs */
	s->prog_cnt = 1;
	s->prog_skel_sz = sizeof(*s->progs);
	s->progs = (struct bpf_prog_skeleton *)calloc(s->prog_cnt, s->prog_skel_sz);
	if (!s->progs) {
		err = -ENOMEM;
		goto err;
	}

	s->progs[0].name = "handle_execve";
	s->progs[0].prog = &obj->progs.handle_execve;
	s->progs[0].link = &obj->links.handle_execve;

	s->data = agent_bpf__elf_bytes(&s->data_sz);

	obj->skeleton = s;
	return 0;
err:
	bpf_object__destroy_skeleton(s);
	return err;
}

static inline const void *agent_bpf__elf_bytes(size_t *sz)
{
	static const char data[] __attribute__((__aligned__(8))) = "\
\x7f\x45\x4c\x46\x02\x01\x01\0\0\0\0\0\0\0\0\0\x01\0\xf7\0\x01\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\x10\x0f\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\x40\0\x1a\0\
\x01\0\x18\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xb7\x02\0\0\x0f\0\0\0\x85\0\0\0\x06\
\0\0\0\xb7\0\0\0\0\0\0\0\x95\0\0\0\0\0\0\0\x47\x50\x4c\0\x65\x78\x65\x63\x76\
\x65\x20\x63\x61\x6c\x6c\x65\x64\x0a\0\x01\x11\x01\x25\x25\x13\x05\x03\x25\x72\
\x17\x10\x17\x1b\x25\x11\x1b\x12\x06\x73\x17\0\0\x02\x34\0\x03\x25\x49\x13\x3f\
\x19\x3a\x0b\x3b\x0b\x02\x18\0\0\x03\x01\x01\x49\x13\0\0\x04\x21\0\x49\x13\x37\
\x0b\0\0\x05\x24\0\x03\x25\x3e\x0b\x0b\x0b\0\0\x06\x24\0\x03\x25\x0b\x0b\x3e\
\x0b\0\0\x07\x2e\x01\x11\x1b\x12\x06\x40\x18\x7a\x19\x03\x25\x3a\x0b\x3b\x0b\
\x27\x19\x49\x13\x3f\x19\0\0\x08\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x02\x18\
\0\0\x09\x05\0\x03\x25\x3a\x0b\x3b\x0b\x49\x13\0\0\x0a\x26\0\x49\x13\0\0\x0b\
\x34\0\x03\x25\x49\x13\x3a\x0b\x3b\x0b\x1c\x0f\0\0\x0c\x0f\0\x49\x13\0\0\x0d\
\x15\x01\x49\x13\x27\x19\0\0\x0e\x05\0\x49\x13\0\0\x0f\x18\0\0\0\x10\x16\0\x49\
\x13\x03\x25\x3a\x0b\x3b\x05\0\0\x11\x13\x01\x03\x25\x0b\x0b\x3a\x0b\x3b\x06\0\
\0\x12\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x06\x38\x0b\0\0\x13\x13\x01\x03\x25\
\x0b\x0b\x3a\x0b\x3b\x05\0\0\x14\x0d\0\x03\x25\x49\x13\x3a\x0b\x3b\x05\x38\x0b\
\0\0\0\x3d\x01\0\0\x05\0\x01\x08\0\0\0\0\x01\0\x1d\0\x01\x08\0\0\0\0\0\0\0\x02\
\x02\x30\0\0\0\x08\0\0\0\x02\x03\x2e\0\0\0\0\x04\x02\xa1\0\x03\x3a\0\0\0\x04\
\x3e\0\0\0\x04\0\x05\x04\x06\x01\x06\x05\x08\x07\x07\x02\x30\0\0\0\x01\x5a\x0b\
\0\x07\xab\0\0\0\x08\x06\x65\0\0\0\0\x08\x02\xa1\x01\x09\x0d\0\x07\xaf\0\0\0\0\
\x03\x71\0\0\0\x04\x3e\0\0\0\x0f\0\x0a\x3a\0\0\0\x0b\x07\x7f\0\0\0\x02\xb1\x06\
\x0c\x84\0\0\0\x0d\x95\0\0\0\x0e\x99\0\0\0\x0e\x9e\0\0\0\x0f\0\x05\x08\x05\x08\
\x0c\x71\0\0\0\x10\xa7\0\0\0\x0a\x01\x0f\x75\x05\x09\x07\x04\x05\x0c\x05\x04\
\x0c\xb4\0\0\0\x11\x1a\x40\x01\x81\x1e\x02\0\x12\x0e\xed\0\0\0\x01\x82\x1e\x02\
\0\0\x12\x16\x95\0\0\0\x01\x83\x1e\x02\0\x08\x12\x17\x24\x01\0\0\x01\x84\x1e\
\x02\0\x10\x12\x19\x34\x01\0\0\x01\x85\x1e\x02\0\x40\0\x13\x15\x08\x01\x0d\xc4\
\x14\x0f\x1c\x01\0\0\x01\x0e\xc4\0\x14\x11\x20\x01\0\0\x01\x0f\xc4\x02\x14\x13\
\x20\x01\0\0\x01\x10\xc4\x03\x14\x14\xab\0\0\0\x01\x11\xc4\x04\0\x05\x10\x07\
\x02\x05\x12\x08\x01\x03\x30\x01\0\0\x04\x3e\0\0\0\x06\0\x05\x18\x07\x08\x03\
\x3a\0\0\0\x04\x3e\0\0\0\0\0\0\x70\0\0\0\x05\0\0\0\0\0\0\0\x27\0\0\0\x33\0\0\0\
\x64\0\0\0\x6c\0\0\0\x71\0\0\0\x85\0\0\0\x8d\0\0\0\x9e\0\0\0\xa3\0\0\0\xb0\0\0\
\0\xb6\0\0\0\xc4\0\0\0\xc8\0\0\0\xcc\0\0\0\xd0\0\0\0\xd5\0\0\0\xe4\0\0\0\xea\0\
\0\0\xf8\0\0\0\x06\x01\0\0\x0a\x01\0\0\x16\x01\0\0\x19\x01\0\0\x1e\x01\0\0\x2c\
\x01\0\0\x33\x01\0\0\x55\x62\x75\x6e\x74\x75\x20\x63\x6c\x61\x6e\x67\x20\x76\
\x65\x72\x73\x69\x6f\x6e\x20\x31\x38\x2e\x31\x2e\x33\x20\x28\x31\x75\x62\x75\
\x6e\x74\x75\x31\x29\0\x61\x67\x65\x6e\x74\x2e\x62\x70\x66\x2e\x63\0\x2f\x68\
\x6f\x6d\x65\x2f\x61\x76\x69\x6e\x61\x73\x68\x2f\x57\x6f\x72\x6b\x2f\x65\x62\
\x70\x66\x5f\x6c\x65\x61\x6b\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x2f\x6c\x6f\x63\
\x61\x6c\x5f\x61\x67\x65\x6e\x74\0\x4c\x49\x43\x45\x4e\x53\x45\0\x63\x68\x61\
\x72\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\x54\x59\x50\x45\x5f\
\x5f\0\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x62\x70\x66\x5f\x74\x72\x61\x63\x65\x5f\
\x70\x72\x69\x6e\x74\x6b\0\x6c\x6f\x6e\x67\0\x75\x6e\x73\x69\x67\x6e\x65\x64\
\x20\x69\x6e\x74\0\x5f\x5f\x75\x33\x32\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\
\x65\x63\x76\x65\0\x69\x6e\x74\0\x63\x74\x78\0\x65\x6e\x74\0\x74\x79\x70\x65\0\
\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x66\x6c\x61\x67\x73\
\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\x63\x68\x61\x72\0\x70\x72\x65\x65\x6d\
\x70\x74\x5f\x63\x6f\x75\x6e\x74\0\x70\x69\x64\0\x74\x72\x61\x63\x65\x5f\x65\
\x6e\x74\x72\x79\0\x69\x64\0\x61\x72\x67\x73\0\x75\x6e\x73\x69\x67\x6e\x65\x64\
\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\x65\x5f\x65\
\x76\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x1c\
\0\0\0\x05\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9f\xeb\x01\
\0\x18\0\0\0\0\0\0\0\xd0\x01\0\0\xd0\x01\0\0\x77\x01\0\0\0\0\0\0\0\0\0\x02\x02\
\0\0\0\x01\0\0\0\x04\0\0\x04\x40\0\0\0\x1b\0\0\0\x03\0\0\0\0\0\0\0\x1f\0\0\0\
\x07\0\0\0\x40\0\0\0\x22\0\0\0\x09\0\0\0\x80\0\0\0\x27\0\0\0\x0c\0\0\0\0\x02\0\
\0\x2e\0\0\0\x04\0\0\x04\x08\0\0\0\x3a\0\0\0\x04\0\0\0\0\0\0\0\x3f\0\0\0\x05\0\
\0\0\x10\0\0\0\x45\0\0\0\x05\0\0\0\x18\0\0\0\x53\0\0\0\x06\0\0\0\x20\0\0\0\x57\
\0\0\0\0\0\0\x01\x02\0\0\0\x10\0\0\0\x66\0\0\0\0\0\0\x01\x01\0\0\0\x08\0\0\0\
\x74\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\x01\x78\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\
\0\x01\x7d\0\0\0\0\0\0\x01\x08\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x08\0\
\0\0\x0a\0\0\0\x06\0\0\0\x8b\0\0\0\0\0\0\x01\x04\0\0\0\x20\0\0\0\x9f\0\0\0\0\0\
\0\x01\x01\0\0\0\x08\0\0\x01\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x0a\0\0\0\0\0\
\0\0\0\0\0\0\x01\0\0\x0d\x06\0\0\0\xa4\0\0\0\x01\0\0\0\xa8\0\0\0\x01\0\0\x0c\
\x0d\0\0\0\0\0\0\0\0\0\0\x03\0\0\0\0\x0b\0\0\0\x0a\0\0\0\x04\0\0\0\x49\x01\0\0\
\0\0\0\x0e\x0f\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\x0a\x0b\0\0\0\0\0\0\0\0\0\0\x03\0\
\0\0\0\x11\0\0\0\x0a\0\0\0\x0f\0\0\0\x51\x01\0\0\0\0\0\x0e\x12\0\0\0\0\0\0\0\
\x67\x01\0\0\x01\0\0\x0f\0\0\0\0\x13\0\0\0\0\0\0\0\x0f\0\0\0\x6f\x01\0\0\x01\0\
\0\x0f\0\0\0\0\x10\0\0\0\0\0\0\0\x04\0\0\0\0\x74\x72\x61\x63\x65\x5f\x65\x76\
\x65\x6e\x74\x5f\x72\x61\x77\x5f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\0\x65\x6e\
\x74\0\x69\x64\0\x61\x72\x67\x73\0\x5f\x5f\x64\x61\x74\x61\0\x74\x72\x61\x63\
\x65\x5f\x65\x6e\x74\x72\x79\0\x74\x79\x70\x65\0\x66\x6c\x61\x67\x73\0\x70\x72\
\x65\x65\x6d\x70\x74\x5f\x63\x6f\x75\x6e\x74\0\x70\x69\x64\0\x75\x6e\x73\x69\
\x67\x6e\x65\x64\x20\x73\x68\x6f\x72\x74\0\x75\x6e\x73\x69\x67\x6e\x65\x64\x20\
\x63\x68\x61\x72\0\x69\x6e\x74\0\x6c\x6f\x6e\x67\0\x75\x6e\x73\x69\x67\x6e\x65\
\x64\x20\x6c\x6f\x6e\x67\0\x5f\x5f\x41\x52\x52\x41\x59\x5f\x53\x49\x5a\x45\x5f\
\x54\x59\x50\x45\x5f\x5f\0\x63\x68\x61\x72\0\x63\x74\x78\0\x68\x61\x6e\x64\x6c\
\x65\x5f\x65\x78\x65\x63\x76\x65\0\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\
\x73\x79\x73\x63\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\
\x65\x78\x65\x63\x76\x65\0\x2f\x68\x6f\x6d\x65\x2f\x61\x76\x69\x6e\x61\x73\x68\
\x2f\x57\x6f\x72\x6b\x2f\x65\x62\x70\x66\x5f\x6c\x65\x61\x6b\x5f\x6d\x6f\x6e\
\x69\x74\x6f\x72\x2f\x6c\x6f\x63\x61\x6c\x5f\x61\x67\x65\x6e\x74\x2f\x61\x67\
\x65\x6e\x74\x2e\x62\x70\x66\x2e\x63\0\x20\x20\x20\x20\x62\x70\x66\x5f\x70\x72\
\x69\x6e\x74\x6b\x28\x22\x65\x78\x65\x63\x76\x65\x20\x63\x61\x6c\x6c\x65\x64\
\x5c\x6e\x22\x29\x3b\0\x20\x20\x20\x20\x72\x65\x74\x75\x72\x6e\x20\x30\x3b\0\
\x4c\x49\x43\x45\x4e\x53\x45\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\x65\x63\x76\
\x65\x2e\x5f\x5f\x5f\x5f\x66\x6d\x74\0\x2e\x72\x6f\x64\x61\x74\x61\0\x6c\x69\
\x63\x65\x6e\x73\x65\0\0\x9f\xeb\x01\0\x20\0\0\0\0\0\0\0\x14\0\0\0\x14\0\0\0\
\x2c\0\0\0\x40\0\0\0\0\0\0\0\x08\0\0\0\xb6\0\0\0\x01\0\0\0\0\0\0\0\x0e\0\0\0\
\x10\0\0\0\xb6\0\0\0\x02\0\0\0\0\0\0\0\xdb\0\0\0\x18\x01\0\0\x05\x20\0\0\x20\0\
\0\0\xdb\0\0\0\x3b\x01\0\0\x05\x24\0\0\x0c\0\0\0\xff\xff\xff\xff\x04\0\x08\0\
\x08\x7c\x0b\0\x14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x88\0\0\0\
\x05\0\x08\0\x69\0\0\0\x08\x01\x01\xfb\x0e\x0d\0\x01\x01\x01\x01\0\0\0\x01\0\0\
\x01\x01\x01\x1f\x03\0\0\0\0\x31\0\0\0\x33\0\0\0\x03\x01\x1f\x02\x0f\x05\x1e\
\x03\x44\0\0\0\0\xe8\x13\xb1\x33\x3e\x8c\x16\x84\x80\x29\x01\x74\x0b\xe5\x8b\
\xc2\x50\0\0\0\x01\x0c\x85\xc4\x73\x42\x95\xa2\x72\x0b\x83\xbb\xce\x36\xd7\x9e\
\xe6\x5a\0\0\0\x02\x09\xcf\xcd\x71\x69\xc2\x4b\xec\x44\x8f\x30\x58\x2e\x8c\x6d\
\xb9\x04\0\x05\x05\x0a\0\x09\x02\0\0\0\0\0\0\0\0\x19\x4b\x02\x02\0\x01\x01\x2f\
\x68\x6f\x6d\x65\x2f\x61\x76\x69\x6e\x61\x73\x68\x2f\x57\x6f\x72\x6b\x2f\x65\
\x62\x70\x66\x5f\x6c\x65\x61\x6b\x5f\x6d\x6f\x6e\x69\x74\x6f\x72\x2f\x6c\x6f\
\x63\x61\x6c\x5f\x61\x67\x65\x6e\x74\0\x2e\0\x2f\x75\x73\x72\x2f\x69\x6e\x63\
\x6c\x75\x64\x65\x2f\x62\x70\x66\0\x61\x67\x65\x6e\x74\x2e\x62\x70\x66\x2e\x63\
\0\x76\x6d\x6c\x69\x6e\x75\x78\x2e\x68\0\x62\x70\x66\x5f\x68\x65\x6c\x70\x65\
\x72\x5f\x64\x65\x66\x73\x2e\x68\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\xf8\0\0\0\x04\0\xf1\xff\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x03\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x22\0\0\0\x01\0\x06\0\0\0\0\0\0\0\0\0\x0f\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x07\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x0a\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x0c\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x0d\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\x13\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x03\0\x15\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x03\0\
\x17\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xc1\0\0\0\x12\0\x03\0\0\0\0\0\0\0\0\0\
\x30\0\0\0\0\0\0\0\x25\x01\0\0\x11\0\x05\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\x01\0\0\0\x04\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x05\0\0\0\x11\0\
\0\0\0\0\0\0\x03\0\0\0\x06\0\0\0\x15\0\0\0\0\0\0\0\x03\0\0\0\x0a\0\0\0\x1f\0\0\
\0\0\0\0\0\x03\0\0\0\x08\0\0\0\x08\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x0c\0\0\0\
\0\0\0\0\x03\0\0\0\x07\0\0\0\x10\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x14\0\0\0\0\
\0\0\0\x03\0\0\0\x07\0\0\0\x18\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x1c\0\0\0\0\0\
\0\0\x03\0\0\0\x07\0\0\0\x20\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x24\0\0\0\0\0\0\
\0\x03\0\0\0\x07\0\0\0\x28\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x2c\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x30\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x34\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x38\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x3c\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x40\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x44\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x48\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x4c\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x50\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x54\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x58\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x5c\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x64\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x68\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x6c\0\0\0\0\0\0\0\
\x03\0\0\0\x07\0\0\0\x70\0\0\0\0\0\0\0\x03\0\0\0\x07\0\0\0\x08\0\0\0\0\0\0\0\
\x02\0\0\0\x0d\0\0\0\x10\0\0\0\0\0\0\0\x02\0\0\0\x04\0\0\0\x18\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\xc8\x01\0\0\0\0\0\0\x03\0\0\0\x04\0\0\0\xe0\x01\0\0\0\0\0\
\0\x04\0\0\0\x0d\0\0\0\x2c\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x40\0\0\0\0\0\0\0\
\x04\0\0\0\x02\0\0\0\x50\0\0\0\0\0\0\0\x04\0\0\0\x02\0\0\0\x14\0\0\0\0\0\0\0\
\x03\0\0\0\x09\0\0\0\x18\0\0\0\0\0\0\0\x02\0\0\0\x02\0\0\0\x22\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x26\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x2a\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x36\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x4b\0\0\0\0\0\0\0\
\x03\0\0\0\x0b\0\0\0\x60\0\0\0\0\0\0\0\x03\0\0\0\x0b\0\0\0\x7d\0\0\0\0\0\0\0\
\x02\0\0\0\x02\0\0\0\x0c\x0d\x03\0\x2e\x64\x65\x62\x75\x67\x5f\x61\x62\x62\x72\
\x65\x76\0\x2e\x74\x65\x78\x74\0\x2e\x72\x65\x6c\x2e\x42\x54\x46\x2e\x65\x78\
\x74\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\x65\x63\x76\x65\x2e\x5f\x5f\x5f\x5f\
\x66\x6d\x74\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\x5f\x6f\
\x66\x66\x73\x65\x74\x73\0\x2e\x64\x65\x62\x75\x67\x5f\x73\x74\x72\0\x2e\x64\
\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\x5f\x73\x74\x72\0\x2e\x72\x65\x6c\x2e\x64\
\x65\x62\x75\x67\x5f\x61\x64\x64\x72\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\
\x5f\x69\x6e\x66\x6f\0\x2e\x6c\x6c\x76\x6d\x5f\x61\x64\x64\x72\x73\x69\x67\0\
\x2e\x72\x65\x6c\x74\x72\x61\x63\x65\x70\x6f\x69\x6e\x74\x2f\x73\x79\x73\x63\
\x61\x6c\x6c\x73\x2f\x73\x79\x73\x5f\x65\x6e\x74\x65\x72\x5f\x65\x78\x65\x63\
\x76\x65\0\x68\x61\x6e\x64\x6c\x65\x5f\x65\x78\x65\x63\x76\x65\0\x6c\x69\x63\
\x65\x6e\x73\x65\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x6c\x69\x6e\x65\
\0\x2e\x72\x65\x6c\x2e\x64\x65\x62\x75\x67\x5f\x66\x72\x61\x6d\x65\0\x61\x67\
\x65\x6e\x74\x2e\x62\x70\x66\x2e\x63\0\x2e\x73\x74\x72\x74\x61\x62\0\x2e\x73\
\x79\x6d\x74\x61\x62\0\x2e\x72\x6f\x64\x61\x74\x61\0\x2e\x72\x65\x6c\x2e\x42\
\x54\x46\0\x4c\x49\x43\x45\x4e\x53\x45\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x04\x01\0\0\x03\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe3\x0d\0\0\
\0\0\0\0\x2d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x0f\0\0\0\x01\0\0\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x9c\0\0\0\x01\0\0\
\0\x06\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x98\0\0\0\x09\0\0\0\x40\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xd0\x0a\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x03\0\0\0\
\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\xcf\0\0\0\x01\0\0\0\x03\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x14\x01\0\0\x01\0\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x74\0\0\0\0\0\0\0\x0f\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\x01\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x83\0\0\0\0\0\0\0\
\xfb\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\0\0\0\
\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7e\x01\0\0\0\0\0\0\x41\x01\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x7a\0\0\0\x09\0\0\0\x40\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0a\0\0\0\0\0\0\x40\0\0\0\0\0\0\0\x19\0\0\0\
\x08\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x3c\0\0\0\x01\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\xbf\x02\0\0\0\0\0\0\x74\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x38\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\x20\x0b\0\0\0\0\0\0\xb0\x01\0\0\0\0\0\0\x19\0\0\0\x0a\0\0\0\x08\0\0\0\0\
\0\0\0\x10\0\0\0\0\0\0\0\x4f\0\0\0\x01\0\0\0\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x33\x03\0\0\0\0\0\0\x4d\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\
\0\0\0\0\0\0\0\x6e\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x80\x04\0\0\
\0\0\0\0\x20\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x6a\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd0\x0c\0\0\0\0\0\0\x30\
\0\0\0\0\0\0\0\x19\0\0\0\x0d\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x20\x01\
\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xa0\x04\0\0\0\0\0\0\x5f\x03\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x1c\x01\0\0\x09\0\0\
\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0d\0\0\0\0\0\0\x20\0\0\0\0\0\0\0\x19\0\
\0\0\x0f\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x19\0\0\0\x01\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\x60\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x04\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x15\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x20\x0d\0\0\0\0\0\0\x30\0\0\0\0\0\0\0\x19\0\0\0\x11\0\0\0\x08\0\0\0\
\0\0\0\0\x10\0\0\0\0\0\0\0\xeb\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\
\x60\x08\0\0\0\0\0\0\x28\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x08\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\xe7\0\0\0\x09\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x50\x0d\0\0\0\
\0\0\0\x20\0\0\0\0\0\0\0\x19\0\0\0\x13\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\
\0\xdb\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x88\x08\0\0\0\0\0\0\x8c\
\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\xd7\0\0\0\x09\
\0\0\0\x40\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x70\x0d\0\0\0\0\0\0\x70\0\0\0\0\0\0\0\
\x19\0\0\0\x15\0\0\0\x08\0\0\0\0\0\0\0\x10\0\0\0\0\0\0\0\x5a\0\0\0\x01\0\0\0\
\x30\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x14\x09\0\0\0\0\0\0\x6c\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\x01\0\0\0\0\0\0\0\x01\0\0\0\0\0\0\0\x8a\0\0\0\x03\x4c\xff\x6f\0\0\0\
\x80\0\0\0\0\0\0\0\0\0\0\0\0\xe0\x0d\0\0\0\0\0\0\x03\0\0\0\0\0\0\0\x19\0\0\0\0\
\0\0\0\x01\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\x0c\x01\0\0\x02\0\0\0\0\0\0\0\0\0\0\0\
\0\0\0\0\0\0\0\0\x80\x09\0\0\0\0\0\0\x50\x01\0\0\0\0\0\0\x01\0\0\0\x0c\0\0\0\
\x08\0\0\0\0\0\0\0\x18\0\0\0\0\0\0\0";

	*sz = sizeof(data) - 1;
	return (const void *)data;
}

#ifdef __cplusplus
struct agent_bpf *agent_bpf::open(const struct bpf_object_open_opts *opts) { return agent_bpf__open_opts(opts); }
struct agent_bpf *agent_bpf::open_and_load() { return agent_bpf__open_and_load(); }
int agent_bpf::load(struct agent_bpf *skel) { return agent_bpf__load(skel); }
int agent_bpf::attach(struct agent_bpf *skel) { return agent_bpf__attach(skel); }
void agent_bpf::detach(struct agent_bpf *skel) { agent_bpf__detach(skel); }
void agent_bpf::destroy(struct agent_bpf *skel) { agent_bpf__destroy(skel); }
const void *agent_bpf::elf_bytes(size_t *sz) { return agent_bpf__elf_bytes(sz); }
#endif /* __cplusplus */

__attribute__((unused)) static void
agent_bpf__assert(struct agent_bpf *s __attribute__((unused)))
{
#ifdef __cplusplus
#define _Static_assert static_assert
#endif
#ifdef __cplusplus
#undef _Static_assert
#endif
}

#endif /* __AGENT_BPF_SKEL_H__ */
